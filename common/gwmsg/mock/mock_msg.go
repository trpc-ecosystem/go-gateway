//
//
// Tencent is pleased to support the open source community by making tRPC available.
//
// Copyright (C) 2023 Tencent.
// All rights reserved.
//
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the  Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: trpc.group/trpc-go/trpc-gateway/common/gwmsg (interfaces: GwMsg)

// Package mock_gwmsg is a generated GoMock package.
package mock_gwmsg

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockGwMsg is a mock of GwMsg interface.
type MockGwMsg struct {
	ctrl     *gomock.Controller
	recorder *MockGwMsgMockRecorder
}

// MockGwMsgMockRecorder is the mock recorder for MockGwMsg.
type MockGwMsgMockRecorder struct {
	mock *MockGwMsg
}

// NewMockGwMsg creates a new mock instance.
func NewMockGwMsg(ctrl *gomock.Controller) *MockGwMsg {
	mock := &MockGwMsg{ctrl: ctrl}
	mock.recorder = &MockGwMsgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGwMsg) EXPECT() *MockGwMsgMockRecorder {
	return m.recorder
}

// PluginConfig mocks base method.
func (m *MockGwMsg) PluginConfig(arg0 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginConfig", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// PluginConfig indicates an expected call of PluginConfig.
func (mr *MockGwMsgMockRecorder) PluginConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginConfig", reflect.TypeOf((*MockGwMsg)(nil).PluginConfig), arg0)
}

// RouterID mocks base method.
func (m *MockGwMsg) RouterID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouterID")
	ret0, _ := ret[0].(string)
	return ret0
}

// RouterID indicates an expected call of RouterID.
func (mr *MockGwMsgMockRecorder) RouterID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouterID", reflect.TypeOf((*MockGwMsg)(nil).RouterID))
}

// TRPCClientOpts mocks base method.
func (m *MockGwMsg) TRPCClientOpts() []client.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TRPCClientOpts")
	ret0, _ := ret[0].([]client.Option)
	return ret0
}

// TRPCClientOpts indicates an expected call of TRPCClientOpts.
func (mr *MockGwMsgMockRecorder) TRPCClientOpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TRPCClientOpts", reflect.TypeOf((*MockGwMsg)(nil).TRPCClientOpts))
}

// TargetService mocks base method.
func (m *MockGwMsg) TargetService() *client.BackendConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetService")
	ret0, _ := ret[0].(*client.BackendConfig)
	return ret0
}

// TargetService indicates an expected call of TargetService.
func (mr *MockGwMsgMockRecorder) TargetService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetService", reflect.TypeOf((*MockGwMsg)(nil).TargetService))
}

// UpstreamAddr mocks base method.
func (m *MockGwMsg) UpstreamAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpstreamAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// UpstreamAddr indicates an expected call of UpstreamAddr.
func (mr *MockGwMsgMockRecorder) UpstreamAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpstreamAddr", reflect.TypeOf((*MockGwMsg)(nil).UpstreamAddr))
}

// UpstreamLatency mocks base method.
func (m *MockGwMsg) UpstreamLatency() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpstreamLatency")
	ret0, _ := ret[0].(int64)
	return ret0
}

// UpstreamLatency indicates an expected call of UpstreamLatency.
func (mr *MockGwMsgMockRecorder) UpstreamLatency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpstreamLatency", reflect.TypeOf((*MockGwMsg)(nil).UpstreamLatency))
}

// UpstreamMethod mocks base method.
func (m *MockGwMsg) UpstreamMethod() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpstreamMethod")
	ret0, _ := ret[0].(string)
	return ret0
}

// UpstreamMethod indicates an expected call of UpstreamMethod.
func (mr *MockGwMsgMockRecorder) UpstreamMethod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpstreamMethod", reflect.TypeOf((*MockGwMsg)(nil).UpstreamMethod))
}

// UpstreamRspHead mocks base method.
func (m *MockGwMsg) UpstreamRspHead() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpstreamRspHead")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// UpstreamRspHead indicates an expected call of UpstreamRspHead.
func (mr *MockGwMsgMockRecorder) UpstreamRspHead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpstreamRspHead", reflect.TypeOf((*MockGwMsg)(nil).UpstreamRspHead))
}

// WithPluginConfig mocks base method.
func (m *MockGwMsg) WithPluginConfig(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithPluginConfig", arg0, arg1)
}

// WithPluginConfig indicates an expected call of WithPluginConfig.
func (mr *MockGwMsgMockRecorder) WithPluginConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPluginConfig", reflect.TypeOf((*MockGwMsg)(nil).WithPluginConfig), arg0, arg1)
}

// WithRouterID mocks base method.
func (m *MockGwMsg) WithRouterID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithRouterID", arg0)
}

// WithRouterID indicates an expected call of WithRouterID.
func (mr *MockGwMsgMockRecorder) WithRouterID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRouterID", reflect.TypeOf((*MockGwMsg)(nil).WithRouterID), arg0)
}

// WithTRPCClientOpts mocks base method.
func (m *MockGwMsg) WithTRPCClientOpts(arg0 []client.Option) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithTRPCClientOpts", arg0)
}

// WithTRPCClientOpts indicates an expected call of WithTRPCClientOpts.
func (mr *MockGwMsgMockRecorder) WithTRPCClientOpts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTRPCClientOpts", reflect.TypeOf((*MockGwMsg)(nil).WithTRPCClientOpts), arg0)
}

// WithTargetService mocks base method.
func (m *MockGwMsg) WithTargetService(arg0 *client.BackendConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithTargetService", arg0)
}

// WithTargetService indicates an expected call of WithTargetService.
func (mr *MockGwMsgMockRecorder) WithTargetService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTargetService", reflect.TypeOf((*MockGwMsg)(nil).WithTargetService), arg0)
}

// WithUpstreamAddr mocks base method.
func (m *MockGwMsg) WithUpstreamAddr(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithUpstreamAddr", arg0)
}

// WithUpstreamAddr indicates an expected call of WithUpstreamAddr.
func (mr *MockGwMsgMockRecorder) WithUpstreamAddr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUpstreamAddr", reflect.TypeOf((*MockGwMsg)(nil).WithUpstreamAddr), arg0)
}

// WithUpstreamLatency mocks base method.
func (m *MockGwMsg) WithUpstreamLatency(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithUpstreamLatency", arg0)
}

// WithUpstreamLatency indicates an expected call of WithUpstreamLatency.
func (mr *MockGwMsgMockRecorder) WithUpstreamLatency(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUpstreamLatency", reflect.TypeOf((*MockGwMsg)(nil).WithUpstreamLatency), arg0)
}

// WithUpstreamMethod mocks base method.
func (m *MockGwMsg) WithUpstreamMethod(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithUpstreamMethod", arg0)
}

// WithUpstreamMethod indicates an expected call of WithUpstreamMethod.
func (mr *MockGwMsgMockRecorder) WithUpstreamMethod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUpstreamMethod", reflect.TypeOf((*MockGwMsg)(nil).WithUpstreamMethod), arg0)
}

// WithUpstreamRspHead mocks base method.
func (m *MockGwMsg) WithUpstreamRspHead(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithUpstreamRspHead", arg0)
}

// WithUpstreamRspHead indicates an expected call of WithUpstreamRspHead.
func (mr *MockGwMsgMockRecorder) WithUpstreamRspHead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUpstreamRspHead", reflect.TypeOf((*MockGwMsg)(nil).WithUpstreamRspHead), arg0)
}
