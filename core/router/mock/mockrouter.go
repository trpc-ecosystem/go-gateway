//
//
// Tencent is pleased to support the open source community by making tRPC available.
//
// Copyright (C) 2023 Tencent.
// All rights reserved.
//
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the  Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: trpc.group/trpc-go/trpc-gateway/core/router (interfaces: Router)

// Package mock_router is a generated GoMock package.
package mock_router

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "trpc.group/trpc-go/trpc-gateway/core/entity"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// GetMatchRouter mocks base method.
func (m *MockRouter) GetMatchRouter(arg0 context.Context) (*entity.TargetService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchRouter", arg0)
	ret0, _ := ret[0].(*entity.TargetService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchRouter indicates an expected call of GetMatchRouter.
func (mr *MockRouterMockRecorder) GetMatchRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchRouter", reflect.TypeOf((*MockRouter)(nil).GetMatchRouter), arg0)
}

// InitRouterConfig mocks base method.
func (m *MockRouter) InitRouterConfig(arg0 context.Context, arg1 *entity.ProxyConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitRouterConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitRouterConfig indicates an expected call of InitRouterConfig.
func (mr *MockRouterMockRecorder) InitRouterConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitRouterConfig", reflect.TypeOf((*MockRouter)(nil).InitRouterConfig), arg0, arg1)
}

// LoadRouterConf mocks base method.
func (m *MockRouter) LoadRouterConf(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRouterConf", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadRouterConf indicates an expected call of LoadRouterConf.
func (mr *MockRouterMockRecorder) LoadRouterConf(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRouterConf", reflect.TypeOf((*MockRouter)(nil).LoadRouterConf), arg0)
}
