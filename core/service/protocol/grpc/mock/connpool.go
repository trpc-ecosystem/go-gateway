//
//
// Tencent is pleased to support the open source community by making tRPC available.
//
// Copyright (C) 2023 Tencent.
// All rights reserved.
//
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the  Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: trpc.group/trpc-go/trpc-gateway/core/service/protocol/grpc (interfaces: ConnPool)

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockConnPool is a mock of ConnPool interface.
type MockConnPool struct {
	ctrl     *gomock.Controller
	recorder *MockConnPoolMockRecorder
}

// MockConnPoolMockRecorder is the mock recorder for MockConnPool.
type MockConnPoolMockRecorder struct {
	mock *MockConnPool
}

// NewMockConnPool creates a new mock instance.
func NewMockConnPool(ctrl *gomock.Controller) *MockConnPool {
	mock := &MockConnPool{ctrl: ctrl}
	mock.recorder = &MockConnPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnPool) EXPECT() *MockConnPoolMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockConnPool) Get(arg0 string, arg1 time.Duration) (grpc.ClientConnInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(grpc.ClientConnInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConnPoolMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConnPool)(nil).Get), arg0, arg1)
}
