//
//
// Tencent is pleased to support the open source community by making tRPC available.
//
// Copyright (C) 2023 Tencent.
// All rights reserved.
//
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the  Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: trpc.group/trpc-go/trpc-gateway/core/service/protocol (interfaces: CliProtocolHandler)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockCliProtocolHandler is a mock of CliProtocolHandler interface.
type MockCliProtocolHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCliProtocolHandlerMockRecorder
}

// MockCliProtocolHandlerMockRecorder is the mock recorder for MockCliProtocolHandler.
type MockCliProtocolHandlerMockRecorder struct {
	mock *MockCliProtocolHandler
}

// NewMockCliProtocolHandler creates a new mock instance.
func NewMockCliProtocolHandler(ctrl *gomock.Controller) *MockCliProtocolHandler {
	mock := &MockCliProtocolHandler{ctrl: ctrl}
	mock.recorder = &MockCliProtocolHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliProtocolHandler) EXPECT() *MockCliProtocolHandlerMockRecorder {
	return m.recorder
}

// GetCliOptions mocks base method.
func (m *MockCliProtocolHandler) GetCliOptions(arg0 context.Context) ([]client.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCliOptions", arg0)
	ret0, _ := ret[0].([]client.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCliOptions indicates an expected call of GetCliOptions.
func (mr *MockCliProtocolHandlerMockRecorder) GetCliOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCliOptions", reflect.TypeOf((*MockCliProtocolHandler)(nil).GetCliOptions), arg0)
}

// HandleErr mocks base method.
func (m *MockCliProtocolHandler) HandleErr(arg0 context.Context, arg1 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleErr", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleErr indicates an expected call of HandleErr.
func (mr *MockCliProtocolHandlerMockRecorder) HandleErr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleErr", reflect.TypeOf((*MockCliProtocolHandler)(nil).HandleErr), arg0, arg1)
}

// HandleRspBody mocks base method.
func (m *MockCliProtocolHandler) HandleRspBody(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRspBody", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRspBody indicates an expected call of HandleRspBody.
func (mr *MockCliProtocolHandlerMockRecorder) HandleRspBody(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRspBody", reflect.TypeOf((*MockCliProtocolHandler)(nil).HandleRspBody), arg0, arg1)
}

// TransReqBody mocks base method.
func (m *MockCliProtocolHandler) TransReqBody(arg0 context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransReqBody", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransReqBody indicates an expected call of TransReqBody.
func (mr *MockCliProtocolHandlerMockRecorder) TransReqBody(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransReqBody", reflect.TypeOf((*MockCliProtocolHandler)(nil).TransReqBody), arg0)
}

// TransRspBody mocks base method.
func (m *MockCliProtocolHandler) TransRspBody(arg0 context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransRspBody", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransRspBody indicates an expected call of TransRspBody.
func (mr *MockCliProtocolHandlerMockRecorder) TransRspBody(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransRspBody", reflect.TypeOf((*MockCliProtocolHandler)(nil).TransRspBody), arg0)
}

// WithCtx mocks base method.
func (m *MockCliProtocolHandler) WithCtx(arg0 context.Context) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCtx", arg0)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithCtx indicates an expected call of WithCtx.
func (mr *MockCliProtocolHandlerMockRecorder) WithCtx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCtx", reflect.TypeOf((*MockCliProtocolHandler)(nil).WithCtx), arg0)
}
