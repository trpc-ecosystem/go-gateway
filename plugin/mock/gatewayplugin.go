//
//
// Tencent is pleased to support the open source community by making tRPC available.
//
// Copyright (C) 2023 Tencent.
// All rights reserved.
//
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the  Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: trpc.group/trpc-go/trpc-gateway/plugin (interfaces: GatewayPlugin)

// Package mock_plugin is a generated GoMock package.
package mock_plugin

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	plugin "trpc.group/trpc-go/trpc-go/plugin"
)

// MockGatewayPlugin is a mock of GatewayPlugin interface.
type MockGatewayPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayPluginMockRecorder
}

// MockGatewayPluginMockRecorder is the mock recorder for MockGatewayPlugin.
type MockGatewayPluginMockRecorder struct {
	mock *MockGatewayPlugin
}

// NewMockGatewayPlugin creates a new mock instance.
func NewMockGatewayPlugin(ctrl *gomock.Controller) *MockGatewayPlugin {
	mock := &MockGatewayPlugin{ctrl: ctrl}
	mock.recorder = &MockGatewayPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayPlugin) EXPECT() *MockGatewayPluginMockRecorder {
	return m.recorder
}

// CheckConfig mocks base method.
func (m *MockGatewayPlugin) CheckConfig(arg0 string, arg1 plugin.Decoder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckConfig indicates an expected call of CheckConfig.
func (mr *MockGatewayPluginMockRecorder) CheckConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConfig", reflect.TypeOf((*MockGatewayPlugin)(nil).CheckConfig), arg0, arg1)
}

// Setup mocks base method.
func (m *MockGatewayPlugin) Setup(arg0 string, arg1 plugin.Decoder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGatewayPluginMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGatewayPlugin)(nil).Setup), arg0, arg1)
}

// Type mocks base method.
func (m *MockGatewayPlugin) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockGatewayPluginMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockGatewayPlugin)(nil).Type))
}
