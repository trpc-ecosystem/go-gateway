//
//
// Tencent is pleased to support the open source community by making tRPC available.
//
// Copyright (C) 2023 Tencent.
// All rights reserved.
//
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the  Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/polarismesh/polaris-go/api (interfaces: LimitAPI)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/polarismesh/polaris-go/api"
)

// MockLimitAPI is a mock of LimitAPI interface.
type MockLimitAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLimitAPIMockRecorder
}

// MockLimitAPIMockRecorder is the mock recorder for MockLimitAPI.
type MockLimitAPIMockRecorder struct {
	mock *MockLimitAPI
}

// NewMockLimitAPI creates a new mock instance.
func NewMockLimitAPI(ctrl *gomock.Controller) *MockLimitAPI {
	mock := &MockLimitAPI{ctrl: ctrl}
	mock.recorder = &MockLimitAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimitAPI) EXPECT() *MockLimitAPIMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockLimitAPI) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockLimitAPIMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockLimitAPI)(nil).Destroy))
}

// GetQuota mocks base method.
func (m *MockLimitAPI) GetQuota(arg0 api.QuotaRequest) (api.QuotaFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", arg0)
	ret0, _ := ret[0].(api.QuotaFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuota indicates an expected call of GetQuota.
func (mr *MockLimitAPIMockRecorder) GetQuota(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuota", reflect.TypeOf((*MockLimitAPI)(nil).GetQuota), arg0)
}

// SDKContext mocks base method.
func (m *MockLimitAPI) SDKContext() api.SDKContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SDKContext")
	ret0, _ := ret[0].(api.SDKContext)
	return ret0
}

// SDKContext indicates an expected call of SDKContext.
func (mr *MockLimitAPIMockRecorder) SDKContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDKContext", reflect.TypeOf((*MockLimitAPI)(nil).SDKContext))
}
